1
00:00:00,120 --> 00:00:02,110

react is a JavaScript library full of

2
00:00:02,110 --> 00:00:02,120
react is a JavaScript library full of
 

3
00:00:02,120 --> 00:00:04,470
react is a JavaScript library full of
fancy terms like reconciliation

4
00:00:04,470 --> 00:00:04,480
fancy terms like reconciliation
 

5
00:00:04,480 --> 00:00:07,150
fancy terms like reconciliation
composition and error boundaries what do

6
00:00:07,150 --> 00:00:07,160
composition and error boundaries what do
 

7
00:00:07,160 --> 00:00:09,230
composition and error boundaries what do
all these terms actually mean let's

8
00:00:09,230 --> 00:00:09,240
all these terms actually mean let's
 

9
00:00:09,240 --> 00:00:11,430
all these terms actually mean let's
start from the beginning with components

10
00:00:11,430 --> 00:00:11,440
start from the beginning with components
 

11
00:00:11,440 --> 00:00:12,990
start from the beginning with components
components are the building blocks of

12
00:00:12,990 --> 00:00:13,000
components are the building blocks of
 

13
00:00:13,000 --> 00:00:15,190
components are the building blocks of
every react app they allow us to make

14
00:00:15,190 --> 00:00:15,200
every react app they allow us to make
 

15
00:00:15,200 --> 00:00:16,790
every react app they allow us to make
all the visible parts of our

16
00:00:16,790 --> 00:00:16,800
all the visible parts of our
 

17
00:00:16,800 --> 00:00:19,710
all the visible parts of our
applications like buttons inputs or even

18
00:00:19,710 --> 00:00:19,720
applications like buttons inputs or even
 

19
00:00:19,720 --> 00:00:22,550
applications like buttons inputs or even
entire Pages just like Legos you can use

20
00:00:22,550 --> 00:00:22,560
entire Pages just like Legos you can use
 

21
00:00:22,560 --> 00:00:25,109
entire Pages just like Legos you can use
components as many times as you want

22
00:00:25,109 --> 00:00:25,119
components as many times as you want
 

23
00:00:25,119 --> 00:00:27,070
components as many times as you want
every react component is a JavaScript

24
00:00:27,070 --> 00:00:27,080
every react component is a JavaScript
 

25
00:00:27,080 --> 00:00:29,509
every react component is a JavaScript
function that returns markup but since

26
00:00:29,509 --> 00:00:29,519
function that returns markup but since
 

27
00:00:29,519 --> 00:00:31,710
function that returns markup but since
react is is a JavaScript library react

28
00:00:31,710 --> 00:00:31,720
react is is a JavaScript library react
 

29
00:00:31,720 --> 00:00:34,549
react is is a JavaScript library react
components don't return HTML markup they

30
00:00:34,549 --> 00:00:34,559
components don't return HTML markup they
 

31
00:00:34,559 --> 00:00:36,990
components don't return HTML markup they
actually return something called jsx

32
00:00:36,990 --> 00:00:37,000
actually return something called jsx
 

33
00:00:37,000 --> 00:00:40,110
actually return something called jsx
which is Javascript in Disguise jsx is

34
00:00:40,110 --> 00:00:40,120
which is Javascript in Disguise jsx is
 

35
00:00:40,120 --> 00:00:42,470
which is Javascript in Disguise jsx is
optional but the alternative way to make

36
00:00:42,470 --> 00:00:42,480
optional but the alternative way to make
 

37
00:00:42,480 --> 00:00:44,590
optional but the alternative way to make
user interfaces is with the function

38
00:00:44,590 --> 00:00:44,600
user interfaces is with the function
 

39
00:00:44,600 --> 00:00:46,709
user interfaces is with the function
create element which gets annoying to

40
00:00:46,709 --> 00:00:46,719
create element which gets annoying to
 

41
00:00:46,719 --> 00:00:49,670
create element which gets annoying to
write pretty fast so everyone just uses

42
00:00:49,670 --> 00:00:49,680
write pretty fast so everyone just uses
 

43
00:00:49,680 --> 00:00:52,750
write pretty fast so everyone just uses
jsx since jsx is Javascript you can't

44
00:00:52,750 --> 00:00:52,760
jsx since jsx is Javascript you can't
 

45
00:00:52,760 --> 00:00:55,349
jsx since jsx is Javascript you can't
write attributes like you would in HTML

46
00:00:55,349 --> 00:00:55,359
write attributes like you would in HTML
 

47
00:00:55,359 --> 00:00:57,270
write attributes like you would in HTML
you have to write them in the camel case

48
00:00:57,270 --> 00:00:57,280
you have to write them in the camel case
 

49
00:00:57,280 --> 00:01:00,069
you have to write them in the camel case
style that means HTML attributes like

50
00:01:00,069 --> 00:01:00,079
style that means HTML attributes like
 

51
00:01:00,079 --> 00:01:04,189
style that means HTML attributes like
class become class name unlike HTML

52
00:01:04,189 --> 00:01:04,199
class become class name unlike HTML
 

53
00:01:04,199 --> 00:01:06,830
class become class name unlike HTML
which is static and unchanging the

54
00:01:06,830 --> 00:01:06,840
which is static and unchanging the
 

55
00:01:06,840 --> 00:01:09,070
which is static and unchanging the
benefit of using react is that you can

56
00:01:09,070 --> 00:01:09,080
benefit of using react is that you can
 

57
00:01:09,080 --> 00:01:11,590
benefit of using react is that you can
use Dynamic JavaScript values in your

58
00:01:11,590 --> 00:01:11,600
use Dynamic JavaScript values in your
 

59
00:01:11,600 --> 00:01:14,310
use Dynamic JavaScript values in your
jsx if you have data you can display it

60
00:01:14,310 --> 00:01:14,320
jsx if you have data you can display it
 

61
00:01:14,320 --> 00:01:17,070
jsx if you have data you can display it
in your jsx using curly braces curly

62
00:01:17,070 --> 00:01:17,080
in your jsx using curly braces curly
 

63
00:01:17,080 --> 00:01:19,149
in your jsx using curly braces curly
braces accept values like strings and

64
00:01:19,149 --> 00:01:19,159
braces accept values like strings and
 

65
00:01:19,159 --> 00:01:21,710
braces accept values like strings and
numbers directly you can use them to

66
00:01:21,710 --> 00:01:21,720
numbers directly you can use them to
 

67
00:01:21,720 --> 00:01:24,310
numbers directly you can use them to
make your attributes Dynamic and you can

68
00:01:24,310 --> 00:01:24,320
make your attributes Dynamic and you can
 

69
00:01:24,320 --> 00:01:26,990
make your attributes Dynamic and you can
style react elements using a JavaScript

70
00:01:26,990 --> 00:01:27,000
style react elements using a JavaScript
 

71
00:01:27,000 --> 00:01:29,910
style react elements using a JavaScript
object within the curly braces since

72
00:01:29,910 --> 00:01:29,920
object within the curly braces since
 

73
00:01:29,920 --> 00:01:31,870
object within the curly braces since
JavaScript functions can only return one

74
00:01:31,870 --> 00:01:31,880
JavaScript functions can only return one
 

75
00:01:31,880 --> 00:01:34,389
JavaScript functions can only return one
thing in react you can only return one

76
00:01:34,389 --> 00:01:34,399
thing in react you can only return one
 

77
00:01:34,399 --> 00:01:36,590
thing in react you can only return one
parent element from a component so you

78
00:01:36,590 --> 00:01:36,600
parent element from a component so you
 

79
00:01:36,600 --> 00:01:38,670
parent element from a component so you
can't do this without getting a big

80
00:01:38,670 --> 00:01:38,680
can't do this without getting a big
 

81
00:01:38,680 --> 00:01:40,910
can't do this without getting a big
error we could fix this by wrapping

82
00:01:40,910 --> 00:01:40,920
error we could fix this by wrapping
 

83
00:01:40,920 --> 00:01:43,069
error we could fix this by wrapping
these components in a div but maybe you

84
00:01:43,069 --> 00:01:43,079
these components in a div but maybe you
 

85
00:01:43,079 --> 00:01:44,830
these components in a div but maybe you
don't want to add another element to the

86
00:01:44,830 --> 00:01:44,840
don't want to add another element to the
 

87
00:01:44,840 --> 00:01:47,190
don't want to add another element to the
page instead you can use an empty

88
00:01:47,190 --> 00:01:47,200
page instead you can use an empty
 

89
00:01:47,200 --> 00:01:50,230
page instead you can use an empty
component called a react fragment okay

90
00:01:50,230 --> 00:01:50,240
component called a react fragment okay
 

91
00:01:50,240 --> 00:01:52,190
component called a react fragment okay
but what if I want to pass data into

92
00:01:52,190 --> 00:01:52,200
but what if I want to pass data into
 

93
00:01:52,200 --> 00:01:54,350
but what if I want to pass data into
another component for that you use

94
00:01:54,350 --> 00:01:54,360
another component for that you use
 

95
00:01:54,360 --> 00:01:56,870
another component for that you use
something called props to make a prop

96
00:01:56,870 --> 00:01:56,880
something called props to make a prop
 

97
00:01:56,880 --> 00:01:58,550
something called props to make a prop
create a name on the component you want

98
00:01:58,550 --> 00:01:58,560
create a name on the component you want
 

99
00:01:58,560 --> 00:02:01,350
create a name on the component you want
to pass data to and set it equal to some

100
00:02:01,350 --> 00:02:01,360
to pass data to and set it equal to some
 

101
00:02:01,360 --> 00:02:03,670
to pass data to and set it equal to some
value and that's it you can then use

102
00:02:03,670 --> 00:02:03,680
value and that's it you can then use
 

103
00:02:03,680 --> 00:02:05,830
value and that's it you can then use
that prop in the component you passed it

104
00:02:05,830 --> 00:02:05,840
that prop in the component you passed it
 

105
00:02:05,840 --> 00:02:08,510
that prop in the component you passed it
to props refers to properties on an

106
00:02:08,510 --> 00:02:08,520
to props refers to properties on an
 

107
00:02:08,520 --> 00:02:10,190
to props refers to properties on an
object which is what you get in the

108
00:02:10,190 --> 00:02:10,200
object which is what you get in the
 

109
00:02:10,200 --> 00:02:12,710
object which is what you get in the
parameters of each component to use the

110
00:02:12,710 --> 00:02:12,720
parameters of each component to use the
 

111
00:02:12,720 --> 00:02:14,470
parameters of each component to use the
prop take it from the object like a

112
00:02:14,470 --> 00:02:14,480
prop take it from the object like a
 

113
00:02:14,480 --> 00:02:16,869
prop take it from the object like a
normal JavaScript property think of them

114
00:02:16,869 --> 00:02:16,879
normal JavaScript property think of them
 

115
00:02:16,879 --> 00:02:18,830
normal JavaScript property think of them
like custom attributes you can add to

116
00:02:18,830 --> 00:02:18,840
like custom attributes you can add to
 

117
00:02:18,840 --> 00:02:21,630
like custom attributes you can add to
any component so wait can you pass

118
00:02:21,630 --> 00:02:21,640
any component so wait can you pass
 

119
00:02:21,640 --> 00:02:24,430
any component so wait can you pass
anything as a prop yes you can you can

120
00:02:24,430 --> 00:02:24,440
anything as a prop yes you can you can
 

121
00:02:24,440 --> 00:02:26,509
anything as a prop yes you can you can
even pass other components as props

122
00:02:26,509 --> 00:02:26,519
even pass other components as props
 

123
00:02:26,519 --> 00:02:28,869
even pass other components as props
using the children prop if you make

124
00:02:28,869 --> 00:02:28,879
using the children prop if you make
 

125
00:02:28,879 --> 00:02:31,150
using the children prop if you make
opening and closing tags for a component

126
00:02:31,150 --> 00:02:31,160
opening and closing tags for a component
 

127
00:02:31,160 --> 00:02:33,390
opening and closing tags for a component
you can pass other components in between

128
00:02:33,390 --> 00:02:33,400
you can pass other components in between
 

129
00:02:33,400 --> 00:02:35,869
you can pass other components in between
them these pass components are called

130
00:02:35,869 --> 00:02:35,879
them these pass components are called
 

131
00:02:35,879 --> 00:02:38,350
them these pass components are called
children and you can access them on the

132
00:02:38,350 --> 00:02:38,360
children and you can access them on the
 

133
00:02:38,360 --> 00:02:40,630
children and you can access them on the
children promp of the parent component

134
00:02:40,630 --> 00:02:40,640
children promp of the parent component
 

135
00:02:40,640 --> 00:02:41,990
children promp of the parent component
and it's great for something called

136
00:02:41,990 --> 00:02:42,000
and it's great for something called
 

137
00:02:42,000 --> 00:02:44,110
and it's great for something called
composition which is about organizing

138
00:02:44,110 --> 00:02:44,120
composition which is about organizing
 

139
00:02:44,120 --> 00:02:46,229
composition which is about organizing
our react components in the most optimal

140
00:02:46,229 --> 00:02:46,239
our react components in the most optimal
 

141
00:02:46,239 --> 00:02:48,470
our react components in the most optimal
way the children prop is really useful

142
00:02:48,470 --> 00:02:48,480
way the children prop is really useful
 

143
00:02:48,480 --> 00:02:50,910
way the children prop is really useful
for creating layout components when you

144
00:02:50,910 --> 00:02:50,920
for creating layout components when you
 

145
00:02:50,920 --> 00:02:52,949
for creating layout components when you
want your children to have the same

146
00:02:52,949 --> 00:02:52,959
want your children to have the same
 

147
00:02:52,959 --> 00:02:55,910
want your children to have the same
common layout the key prop is another

148
00:02:55,910 --> 00:02:55,920
common layout the key prop is another
 

149
00:02:55,920 --> 00:02:58,710
common layout the key prop is another
built-in prop to react and no unlike the

150
00:02:58,710 --> 00:02:58,720
built-in prop to react and no unlike the
 

151
00:02:58,720 --> 00:03:00,830
built-in prop to react and no unlike the
name implies it doesn't unlock anything

152
00:03:00,830 --> 00:03:00,840
name implies it doesn't unlock anything
 

153
00:03:00,840 --> 00:03:03,390
name implies it doesn't unlock anything
interesting the key prop is used so

154
00:03:03,390 --> 00:03:03,400
interesting the key prop is used so
 

155
00:03:03,400 --> 00:03:05,830
interesting the key prop is used so
react can tell one component apart from

156
00:03:05,830 --> 00:03:05,840
react can tell one component apart from
 

157
00:03:05,840 --> 00:03:08,030
react can tell one component apart from
another usually when you're creating a

158
00:03:08,030 --> 00:03:08,040
another usually when you're creating a
 

159
00:03:08,040 --> 00:03:11,070
another usually when you're creating a
list with the map function a key is just

160
00:03:11,070 --> 00:03:11,080
list with the map function a key is just
 

161
00:03:11,080 --> 00:03:13,869
list with the map function a key is just
a unique string or number to identify a

162
00:03:13,869 --> 00:03:13,879
a unique string or number to identify a
 

163
00:03:13,879 --> 00:03:15,789
a unique string or number to identify a
component you'll usually know when you

164
00:03:15,789 --> 00:03:15,799
component you'll usually know when you
 

165
00:03:15,799 --> 00:03:17,869
component you'll usually know when you
need to add a key because react will

166
00:03:17,869 --> 00:03:17,879
need to add a key because react will
 

167
00:03:17,879 --> 00:03:20,589
need to add a key because react will
warn you in the console fortunately if

168
00:03:20,589 --> 00:03:20,599
warn you in the console fortunately if
 

169
00:03:20,599 --> 00:03:22,309
warn you in the console fortunately if
you don't have a unique value for each

170
00:03:22,309 --> 00:03:22,319
you don't have a unique value for each
 

171
00:03:22,319 --> 00:03:24,710
you don't have a unique value for each
item you can always use the current

172
00:03:24,710 --> 00:03:24,720
item you can always use the current
 

173
00:03:24,720 --> 00:03:27,550
item you can always use the current
index from the map function but how does

174
00:03:27,550 --> 00:03:27,560
index from the map function but how does
 

175
00:03:27,560 --> 00:03:30,030
index from the map function but how does
react take all my amazing code and make

176
00:03:30,030 --> 00:03:30,040
react take all my amazing code and make
 

177
00:03:30,040 --> 00:03:32,869
react take all my amazing code and make
it display something in the browser that

178
00:03:32,869 --> 00:03:32,879
it display something in the browser that
 

179
00:03:32,879 --> 00:03:35,470
it display something in the browser that
process is called rendering react does

180
00:03:35,470 --> 00:03:35,480
process is called rendering react does
 

181
00:03:35,480 --> 00:03:37,550
process is called rendering react does
this for us but it's important to know

182
00:03:37,550 --> 00:03:37,560
this for us but it's important to know
 

183
00:03:37,560 --> 00:03:40,030
this for us but it's important to know
how it works because sometimes we can do

184
00:03:40,030 --> 00:03:40,040
how it works because sometimes we can do
 

185
00:03:40,040 --> 00:03:42,429
how it works because sometimes we can do
a bad thing and cause it to infinitely

186
00:03:42,429 --> 00:03:42,439
a bad thing and cause it to infinitely
 

187
00:03:42,439 --> 00:03:45,789
a bad thing and cause it to infinitely
reender which crashes our app the way

188
00:03:45,789 --> 00:03:45,799
reender which crashes our app the way
 

189
00:03:45,799 --> 00:03:48,229
reender which crashes our app the way
react knows how and when to render our

190
00:03:48,229 --> 00:03:48,239
react knows how and when to render our
 

191
00:03:48,239 --> 00:03:50,190
react knows how and when to render our
application is using something called

192
00:03:50,190 --> 00:03:50,200
application is using something called
 

193
00:03:50,200 --> 00:03:54,309
application is using something called
the virtual Dom also known as the vdom

194
00:03:54,309 --> 00:03:54,319
the virtual Dom also known as the vdom
 

195
00:03:54,319 --> 00:03:56,949
the virtual Dom also known as the vdom
okay but what does Dom mean Dom stands

196
00:03:56,949 --> 00:03:56,959
okay but what does Dom mean Dom stands
 

197
00:03:56,959 --> 00:03:59,789
okay but what does Dom mean Dom stands
for document object model which is what

198
00:03:59,789 --> 00:03:59,799
for document object model which is what
 

199
00:03:59,799 --> 00:04:02,710
for document object model which is what
every browser uses to model all the HTML

200
00:04:02,710 --> 00:04:02,720
every browser uses to model all the HTML
 

201
00:04:02,720 --> 00:04:05,390
every browser uses to model all the HTML
elements on a web page and when you draw

202
00:04:05,390 --> 00:04:05,400
elements on a web page and when you draw
 

203
00:04:05,400 --> 00:04:07,869
elements on a web page and when you draw
it out it kind of looks like a tree

204
00:04:07,869 --> 00:04:07,879
it out it kind of looks like a tree
 

205
00:04:07,879 --> 00:04:09,990
it out it kind of looks like a tree
here's the complete rendering process in

206
00:04:09,990 --> 00:04:10,000
here's the complete rendering process in
 

207
00:04:10,000 --> 00:04:12,149
here's the complete rendering process in
react if the state of our react app

208
00:04:12,149 --> 00:04:12,159
react if the state of our react app
 

209
00:04:12,159 --> 00:04:14,750
react if the state of our react app
changes then react updates the virtual

210
00:04:14,750 --> 00:04:14,760
changes then react updates the virtual
 

211
00:04:14,760 --> 00:04:16,830
changes then react updates the virtual
Dom which is quicker to update than the

212
00:04:16,830 --> 00:04:16,840
Dom which is quicker to update than the
 

213
00:04:16,840 --> 00:04:19,949
Dom which is quicker to update than the
real Dom then react uses a process

214
00:04:19,949 --> 00:04:19,959
real Dom then react uses a process
 

215
00:04:19,959 --> 00:04:22,230
real Dom then react uses a process
called diffing to compare the updated

216
00:04:22,230 --> 00:04:22,240
called diffing to compare the updated
 

217
00:04:22,240 --> 00:04:24,710
called diffing to compare the updated
virtual Dom to a previous version to see

218
00:04:24,710 --> 00:04:24,720
virtual Dom to a previous version to see
 

219
00:04:24,720 --> 00:04:26,990
virtual Dom to a previous version to see
what's changed once it sees what's

220
00:04:26,990 --> 00:04:27,000
what's changed once it sees what's
 

221
00:04:27,000 --> 00:04:29,110
what's changed once it sees what's
different react uses a process called

222
00:04:29,110 --> 00:04:29,120
different react uses a process called
 

223
00:04:29,120 --> 00:04:32,150
different react uses a process called
reconcil iation to update the real Dom

224
00:04:32,150 --> 00:04:32,160
reconcil iation to update the real Dom
 

225
00:04:32,160 --> 00:04:34,950
reconcil iation to update the real Dom
with the changes that it found whenever

226
00:04:34,950 --> 00:04:34,960
with the changes that it found whenever
 

227
00:04:34,960 --> 00:04:37,670
with the changes that it found whenever
someone uses our app tons of events take

228
00:04:37,670 --> 00:04:37,680
someone uses our app tons of events take
 

229
00:04:37,680 --> 00:04:39,950
someone uses our app tons of events take
place like clicks Mouse movements and

230
00:04:39,950 --> 00:04:39,960
place like clicks Mouse movements and
 

231
00:04:39,960 --> 00:04:41,990
place like clicks Mouse movements and
key presses many of which we need to

232
00:04:41,990 --> 00:04:42,000
key presses many of which we need to
 

233
00:04:42,000 --> 00:04:44,150
key presses many of which we need to
detect event handling is how we take

234
00:04:44,150 --> 00:04:44,160
detect event handling is how we take
 

235
00:04:44,160 --> 00:04:46,029
detect event handling is how we take
those user events and do something with

236
00:04:46,029 --> 00:04:46,039
those user events and do something with
 

237
00:04:46,039 --> 00:04:48,310
those user events and do something with
them react has a lot of built-in events

238
00:04:48,310 --> 00:04:48,320
them react has a lot of built-in events
 

239
00:04:48,320 --> 00:04:51,670
them react has a lot of built-in events
such as onclick onchange and onsubmit

240
00:04:51,670 --> 00:04:51,680
such as onclick onchange and onsubmit
 

241
00:04:51,680 --> 00:04:53,110
such as onclick onchange and onsubmit
these three events are ones you'll

242
00:04:53,110 --> 00:04:53,120
these three events are ones you'll
 

243
00:04:53,120 --> 00:04:55,710
these three events are ones you'll
probably use the most if we want to

244
00:04:55,710 --> 00:04:55,720
probably use the most if we want to
 

245
00:04:55,720 --> 00:04:58,390
probably use the most if we want to
alert users when a button is clicked we

246
00:04:58,390 --> 00:04:58,400
alert users when a button is clicked we
 

247
00:04:58,400 --> 00:05:00,950
alert users when a button is clicked we
would add the onclick prop to the button

248
00:05:00,950 --> 00:05:00,960
would add the onclick prop to the button
 

249
00:05:00,960 --> 00:05:03,110
would add the onclick prop to the button
and connect it to a function that would

250
00:05:03,110 --> 00:05:03,120
and connect it to a function that would
 

251
00:05:03,120 --> 00:05:04,310
and connect it to a function that would
show that

252
00:05:04,310 --> 00:05:04,320
show that
 

253
00:05:04,320 --> 00:05:07,350
show that
alert to manage data in our react apps

254
00:05:07,350 --> 00:05:07,360
alert to manage data in our react apps
 

255
00:05:07,360 --> 00:05:09,909
alert to manage data in our react apps
we need to use State not that kind of

256
00:05:09,909 --> 00:05:09,919
we need to use State not that kind of
 

257
00:05:09,919 --> 00:05:12,629
we need to use State not that kind of
state though state is like a snapshot

258
00:05:12,629 --> 00:05:12,639
state though state is like a snapshot
 

259
00:05:12,639 --> 00:05:14,790
state though state is like a snapshot
from a camera it's a picture of our app

260
00:05:14,790 --> 00:05:14,800
from a camera it's a picture of our app
 

261
00:05:14,800 --> 00:05:17,310
from a camera it's a picture of our app
at any given time to manage State we

262
00:05:17,310 --> 00:05:17,320
at any given time to manage State we
 

263
00:05:17,320 --> 00:05:19,830
at any given time to manage State we
also can't use JavaScript variables they

264
00:05:19,830 --> 00:05:19,840
also can't use JavaScript variables they
 

265
00:05:19,840 --> 00:05:22,469
also can't use JavaScript variables they
don't cause our app to render instead we

266
00:05:22,469 --> 00:05:22,479
don't cause our app to render instead we
 

267
00:05:22,479 --> 00:05:24,710
don't cause our app to render instead we
use special functions like use State and

268
00:05:24,710 --> 00:05:24,720
use special functions like use State and
 

269
00:05:24,720 --> 00:05:28,150
use special functions like use State and
use reducer use State takes an argument

270
00:05:28,150 --> 00:05:28,160
use reducer use State takes an argument
 

271
00:05:28,160 --> 00:05:30,350
use reducer use State takes an argument
that serves as the starting value value

272
00:05:30,350 --> 00:05:30,360
that serves as the starting value value
 

273
00:05:30,360 --> 00:05:32,909
that serves as the starting value value
of the state variable which is likes in

274
00:05:32,909 --> 00:05:32,919
of the state variable which is likes in
 

275
00:05:32,919 --> 00:05:36,029
of the state variable which is likes in
this example and returns an array

276
00:05:36,029 --> 00:05:36,039
this example and returns an array
 

277
00:05:36,039 --> 00:05:38,550
this example and returns an array
containing the state variable and a

278
00:05:38,550 --> 00:05:38,560
containing the state variable and a
 

279
00:05:38,560 --> 00:05:41,469
containing the state variable and a
function to update that state using our

280
00:05:41,469 --> 00:05:41,479
function to update that state using our
 

281
00:05:41,479 --> 00:05:43,790
function to update that state using our
button example we could also update the

282
00:05:43,790 --> 00:05:43,800
button example we could also update the
 

283
00:05:43,800 --> 00:05:45,469
button example we could also update the
number of times the button's been

284
00:05:45,469 --> 00:05:45,479
number of times the button's been
 

285
00:05:45,479 --> 00:05:47,950
number of times the button's been
clicked with the update function set

286
00:05:47,950 --> 00:05:47,960
clicked with the update function set
 

287
00:05:47,960 --> 00:05:51,189
clicked with the update function set
clicks and display it in the button with

288
00:05:51,189 --> 00:05:51,199
clicks and display it in the button with
 

289
00:05:51,199 --> 00:05:53,070
clicks and display it in the button with
the state variable

290
00:05:53,070 --> 00:05:53,080
the state variable
 

291
00:05:53,080 --> 00:05:55,909
the state variable
likes controlled components use State

292
00:05:55,909 --> 00:05:55,919
likes controlled components use State
 

293
00:05:55,919 --> 00:05:59,189
likes controlled components use State
values to have more predictable Behavior

294
00:05:59,189 --> 00:05:59,199
values to have more predictable Behavior
 

295
00:05:59,199 --> 00:06:00,830
values to have more predictable Behavior
here's an example of a controlled

296
00:06:00,830 --> 00:06:00,840
here's an example of a controlled
 

297
00:06:00,840 --> 00:06:03,110
here's an example of a controlled
component where the value typed into the

298
00:06:03,110 --> 00:06:03,120
component where the value typed into the
 

299
00:06:03,120 --> 00:06:05,590
component where the value typed into the
input is being put into State and

300
00:06:05,590 --> 00:06:05,600
input is being put into State and
 

301
00:06:05,600 --> 00:06:09,029
input is being put into State and
controlled by the state variable value

302
00:06:09,029 --> 00:06:09,039
controlled by the state variable value
 

303
00:06:09,039 --> 00:06:11,790
controlled by the state variable value
here's how it works the user types and

304
00:06:11,790 --> 00:06:11,800
here's how it works the user types and
 

305
00:06:11,800 --> 00:06:13,950
here's how it works the user types and
set value puts what the user typed into

306
00:06:13,950 --> 00:06:13,960
set value puts what the user typed into
 

307
00:06:13,960 --> 00:06:17,309
set value puts what the user typed into
State the state value is then updated

308
00:06:17,309 --> 00:06:17,319
State the state value is then updated
 

309
00:06:17,319 --> 00:06:20,350
State the state value is then updated
and finally the input uses that updated

310
00:06:20,350 --> 00:06:20,360
and finally the input uses that updated
 

311
00:06:20,360 --> 00:06:23,270
and finally the input uses that updated
State as its value controlled components

312
00:06:23,270 --> 00:06:23,280
State as its value controlled components
 

313
00:06:23,280 --> 00:06:25,430
State as its value controlled components
are a great pattern to use because if we

314
00:06:25,430 --> 00:06:25,440
are a great pattern to use because if we
 

315
00:06:25,440 --> 00:06:27,710
are a great pattern to use because if we
want to change the component's behavior

316
00:06:27,710 --> 00:06:27,720
want to change the component's behavior
 

317
00:06:27,720 --> 00:06:29,710
want to change the component's behavior
we just need to change the state that

318
00:06:29,710 --> 00:06:29,720
we just need to change the state that
 

319
00:06:29,720 --> 00:06:32,830
we just need to change the state that
controls it UST state is an example of a

320
00:06:32,830 --> 00:06:32,840
controls it UST state is an example of a
 

321
00:06:32,840 --> 00:06:35,270
controls it UST state is an example of a
react hook which allow us to hook into

322
00:06:35,270 --> 00:06:35,280
react hook which allow us to hook into
 

323
00:06:35,280 --> 00:06:37,830
react hook which allow us to hook into
features such as state within function

324
00:06:37,830 --> 00:06:37,840
features such as state within function
 

325
00:06:37,840 --> 00:06:40,070
features such as state within function
components there are five main types of

326
00:06:40,070 --> 00:06:40,080
components there are five main types of
 

327
00:06:40,080 --> 00:06:42,550
components there are five main types of
hooks State hooks like use State and use

328
00:06:42,550 --> 00:06:42,560
hooks State hooks like use State and use
 

329
00:06:42,560 --> 00:06:44,670
hooks State hooks like use State and use
reducer help you manage state within

330
00:06:44,670 --> 00:06:44,680
reducer help you manage state within
 

331
00:06:44,680 --> 00:06:47,589
reducer help you manage state within
react components context hooks such as

332
00:06:47,589 --> 00:06:47,599
react components context hooks such as
 

333
00:06:47,599 --> 00:06:50,670
react components context hooks such as
use context let you Ed data pass through

334
00:06:50,670 --> 00:06:50,680
use context let you Ed data pass through
 

335
00:06:50,680 --> 00:06:54,350
use context let you Ed data pass through
react context ref hooks such as use ref

336
00:06:54,350 --> 00:06:54,360
react context ref hooks such as use ref
 

337
00:06:54,360 --> 00:06:56,830
react context ref hooks such as use ref
let you reference things like HTML

338
00:06:56,830 --> 00:06:56,840
let you reference things like HTML
 

339
00:06:56,840 --> 00:06:59,830
let you reference things like HTML
elements effect hooks like use effect

340
00:06:59,830 --> 00:06:59,840
elements effect hooks like use effect
 

341
00:06:59,840 --> 00:07:01,670
elements effect hooks like use effect
let you connect with external systems

342
00:07:01,670 --> 00:07:01,680
let you connect with external systems
 

343
00:07:01,680 --> 00:07:04,629
let you connect with external systems
like browser apis and performance hooks

344
00:07:04,629 --> 00:07:04,639
like browser apis and performance hooks
 

345
00:07:04,639 --> 00:07:07,110
like browser apis and performance hooks
like use memo and use callback which can

346
00:07:07,110 --> 00:07:07,120
like use memo and use callback which can
 

347
00:07:07,120 --> 00:07:08,830
like use memo and use callback which can
improve performance by preventing

348
00:07:08,830 --> 00:07:08,840
improve performance by preventing
 

349
00:07:08,840 --> 00:07:11,550
improve performance by preventing
unnecessary work you'll use all of these

350
00:07:11,550 --> 00:07:11,560
unnecessary work you'll use all of these
 

351
00:07:11,560 --> 00:07:13,670
unnecessary work you'll use all of these
hooks at some point but the majority of

352
00:07:13,670 --> 00:07:13,680
hooks at some point but the majority of
 

353
00:07:13,680 --> 00:07:15,589
hooks at some point but the majority of
the time you'll likely use just three

354
00:07:15,589 --> 00:07:15,599
the time you'll likely use just three
 

355
00:07:15,599 --> 00:07:18,390
the time you'll likely use just three
hooks in your react components use State

356
00:07:18,390 --> 00:07:18,400
hooks in your react components use State
 

357
00:07:18,400 --> 00:07:21,749
hooks in your react components use State
use effect and use ref when you think of

358
00:07:21,749 --> 00:07:21,759
use effect and use ref when you think of
 

359
00:07:21,759 --> 00:07:23,550
use effect and use ref when you think of
the word purity you might think of

360
00:07:23,550 --> 00:07:23,560
the word purity you might think of
 

361
00:07:23,560 --> 00:07:26,270
the word purity you might think of
something like purified water Purity is

362
00:07:26,270 --> 00:07:26,280
something like purified water Purity is
 

363
00:07:26,280 --> 00:07:28,270
something like purified water Purity is
a term used to describe how react

364
00:07:28,270 --> 00:07:28,280
a term used to describe how react
 

365
00:07:28,280 --> 00:07:30,510
a term used to describe how react
components should work work but this

366
00:07:30,510 --> 00:07:30,520
components should work work but this
 

367
00:07:30,520 --> 00:07:32,189
components should work work but this
type of Purity is more like how

368
00:07:32,189 --> 00:07:32,199
type of Purity is more like how
 

369
00:07:32,199 --> 00:07:34,830
type of Purity is more like how
mathematical formulas are pure pure

370
00:07:34,830 --> 00:07:34,840
mathematical formulas are pure pure
 

371
00:07:34,840 --> 00:07:36,710
mathematical formulas are pure pure
react components mean that the same

372
00:07:36,710 --> 00:07:36,720
react components mean that the same
 

373
00:07:36,720 --> 00:07:38,589
react components mean that the same
input should always return the same

374
00:07:38,589 --> 00:07:38,599
input should always return the same
 

375
00:07:38,599 --> 00:07:41,749
input should always return the same
output to keep a react component pure

376
00:07:41,749 --> 00:07:41,759
output to keep a react component pure
 

377
00:07:41,759 --> 00:07:45,110
output to keep a react component pure
they should only return their jsx and

378
00:07:45,110 --> 00:07:45,120
they should only return their jsx and
 

379
00:07:45,120 --> 00:07:47,790
they should only return their jsx and
not change any objects or variables that

380
00:07:47,790 --> 00:07:47,800
not change any objects or variables that
 

381
00:07:47,800 --> 00:07:49,869
not change any objects or variables that
existed before rendering the cup

382
00:07:49,869 --> 00:07:49,879
existed before rendering the cup
 

383
00:07:49,879 --> 00:07:52,270
existed before rendering the cup
component in this example is impure

384
00:07:52,270 --> 00:07:52,280
component in this example is impure
 

385
00:07:52,280 --> 00:07:54,309
component in this example is impure
because it changes the variable count

386
00:07:54,309 --> 00:07:54,319
because it changes the variable count
 

387
00:07:54,319 --> 00:07:56,990
because it changes the variable count
during render which exists outside the

388
00:07:56,990 --> 00:07:57,000
during render which exists outside the
 

389
00:07:57,000 --> 00:07:59,469
during render which exists outside the
component this leads to the jsx have

390
00:07:59,469 --> 00:07:59,479
component this leads to the jsx have
 

391
00:07:59,479 --> 00:08:01,950
component this leads to the jsx have
having the wrong output when it is used

392
00:08:01,950 --> 00:08:01,960
having the wrong output when it is used
 

393
00:08:01,960 --> 00:08:04,469
having the wrong output when it is used
more than once to help make sure we

394
00:08:04,469 --> 00:08:04,479
more than once to help make sure we
 

395
00:08:04,479 --> 00:08:06,430
more than once to help make sure we
don't run into errors like this we can

396
00:08:06,430 --> 00:08:06,440
don't run into errors like this we can
 

397
00:08:06,440 --> 00:08:08,710
don't run into errors like this we can
use something called strict mode strict

398
00:08:08,710 --> 00:08:08,720
use something called strict mode strict
 

399
00:08:08,720 --> 00:08:10,550
use something called strict mode strict
mode is a special component which tells

400
00:08:10,550 --> 00:08:10,560
mode is a special component which tells
 

401
00:08:10,560 --> 00:08:12,830
mode is a special component which tells
us about mistakes as we develop our

402
00:08:12,830 --> 00:08:12,840
us about mistakes as we develop our
 

403
00:08:12,840 --> 00:08:14,830
us about mistakes as we develop our
react apps it's really convenient

404
00:08:14,830 --> 00:08:14,840
react apps it's really convenient
 

405
00:08:14,840 --> 00:08:16,830
react apps it's really convenient
because it's just a component we usually

406
00:08:16,830 --> 00:08:16,840
because it's just a component we usually
 

407
00:08:16,840 --> 00:08:19,309
because it's just a component we usually
wrap around our app component and it'll

408
00:08:19,309 --> 00:08:19,319
wrap around our app component and it'll
 

409
00:08:19,319 --> 00:08:21,469
wrap around our app component and it'll
tell us when we really shouldn't do

410
00:08:21,469 --> 00:08:21,479
tell us when we really shouldn't do
 

411
00:08:21,479 --> 00:08:23,710
tell us when we really shouldn't do
something but what if we need to do

412
00:08:23,710 --> 00:08:23,720
something but what if we need to do
 

413
00:08:23,720 --> 00:08:26,230
something but what if we need to do
something outside our react app your app

414
00:08:26,230 --> 00:08:26,240
something outside our react app your app
 

415
00:08:26,240 --> 00:08:28,589
something outside our react app your app
might need to talk with the browser API

416
00:08:28,589 --> 00:08:28,599
might need to talk with the browser API
 

417
00:08:28,599 --> 00:08:31,350
might need to talk with the browser API
or make a request to a server if you do

418
00:08:31,350 --> 00:08:31,360
or make a request to a server if you do
 

419
00:08:31,360 --> 00:08:33,149
or make a request to a server if you do
have an external system you're going to

420
00:08:33,149 --> 00:08:33,159
have an external system you're going to
 

421
00:08:33,159 --> 00:08:36,190
have an external system you're going to
need a way to step outside of react

422
00:08:36,190 --> 00:08:36,200
need a way to step outside of react
 

423
00:08:36,200 --> 00:08:38,310
need a way to step outside of react
effects are code that reach outside of

424
00:08:38,310 --> 00:08:38,320
effects are code that reach outside of
 

425
00:08:38,320 --> 00:08:41,149
effects are code that reach outside of
our react application usually effects

426
00:08:41,149 --> 00:08:41,159
our react application usually effects
 

427
00:08:41,159 --> 00:08:43,230
our react application usually effects
also known as side effects can be done

428
00:08:43,230 --> 00:08:43,240
also known as side effects can be done
 

429
00:08:43,240 --> 00:08:45,949
also known as side effects can be done
within event handlers for example to

430
00:08:45,949 --> 00:08:45,959
within event handlers for example to
 

431
00:08:45,959 --> 00:08:48,630
within event handlers for example to
make an HTTP request when you submit a

432
00:08:48,630 --> 00:08:48,640
make an HTTP request when you submit a
 

433
00:08:48,640 --> 00:08:51,430
make an HTTP request when you submit a
form or click on a button if you can't

434
00:08:51,430 --> 00:08:51,440
form or click on a button if you can't
 

435
00:08:51,440 --> 00:08:53,870
form or click on a button if you can't
run your effects within an event handler

436
00:08:53,870 --> 00:08:53,880
run your effects within an event handler
 

437
00:08:53,880 --> 00:08:55,590
run your effects within an event handler
then you can run them using the use

438
00:08:55,590 --> 00:08:55,600
then you can run them using the use
 

439
00:08:55,600 --> 00:08:58,550
then you can run them using the use
effect hook for example a common pattern

440
00:08:58,550 --> 00:08:58,560
effect hook for example a common pattern
 

441
00:08:58,560 --> 00:09:00,750
effect hook for example a common pattern
is to fetch dat data when components

442
00:09:00,750 --> 00:09:00,760
is to fetch dat data when components
 

443
00:09:00,760 --> 00:09:03,990
is to fetch dat data when components
first load with the use effect hook like

444
00:09:03,990 --> 00:09:04,000
first load with the use effect hook like
 

445
00:09:04,000 --> 00:09:05,910
first load with the use effect hook like
effects sometimes you want to step

446
00:09:05,910 --> 00:09:05,920
effects sometimes you want to step
 

447
00:09:05,920 --> 00:09:08,470
effects sometimes you want to step
outside react and work directly with the

448
00:09:08,470 --> 00:09:08,480
outside react and work directly with the
 

449
00:09:08,480 --> 00:09:11,509
outside react and work directly with the
Dom to reference an actual Dom element

450
00:09:11,509 --> 00:09:11,519
Dom to reference an actual Dom element
 

451
00:09:11,519 --> 00:09:13,949
Dom to reference an actual Dom element
you can use what's called a ref you can

452
00:09:13,949 --> 00:09:13,959
you can use what's called a ref you can
 

453
00:09:13,959 --> 00:09:16,509
you can use what's called a ref you can
create a ref with the Ed ref hook and to

454
00:09:16,509 --> 00:09:16,519
create a ref with the Ed ref hook and to
 

455
00:09:16,519 --> 00:09:19,110
create a ref with the Ed ref hook and to
get access to a Dom element use the ref

456
00:09:19,110 --> 00:09:19,120
get access to a Dom element use the ref
 

457
00:09:19,120 --> 00:09:22,190
get access to a Dom element use the ref
prop on any react element for some tasks

458
00:09:22,190 --> 00:09:22,200
prop on any react element for some tasks
 

459
00:09:22,200 --> 00:09:24,230
prop on any react element for some tasks
such as focusing an input it's much

460
00:09:24,230 --> 00:09:24,240
such as focusing an input it's much
 

461
00:09:24,240 --> 00:09:26,190
such as focusing an input it's much
easier to reference the actual Dom

462
00:09:26,190 --> 00:09:26,200
easier to reference the actual Dom
 

463
00:09:26,200 --> 00:09:28,430
easier to reference the actual Dom
element instead of attempting to do it

464
00:09:28,430 --> 00:09:28,440
element instead of attempting to do it
 

465
00:09:28,440 --> 00:09:30,030
element instead of attempting to do it
the react way

466
00:09:30,030 --> 00:09:30,040
the react way
 

467
00:09:30,040 --> 00:09:32,710
the react way
context is a powerful way to pass prop

468
00:09:32,710 --> 00:09:32,720
context is a powerful way to pass prop
 

469
00:09:32,720 --> 00:09:35,190
context is a powerful way to pass prop
data through your apps components most

470
00:09:35,190 --> 00:09:35,200
data through your apps components most
 

471
00:09:35,200 --> 00:09:37,269
data through your apps components most
react apps have tons of nested

472
00:09:37,269 --> 00:09:37,279
react apps have tons of nested
 

473
00:09:37,279 --> 00:09:39,710
react apps have tons of nested
components to get data down multiple

474
00:09:39,710 --> 00:09:39,720
components to get data down multiple
 

475
00:09:39,720 --> 00:09:42,430
components to get data down multiple
levels involves passing the same props

476
00:09:42,430 --> 00:09:42,440
levels involves passing the same props
 

477
00:09:42,440 --> 00:09:44,430
levels involves passing the same props
through components that don't actually

478
00:09:44,430 --> 00:09:44,440
through components that don't actually
 

479
00:09:44,440 --> 00:09:47,150
through components that don't actually
need it context lets us jump through the

480
00:09:47,150 --> 00:09:47,160
need it context lets us jump through the
 

481
00:09:47,160 --> 00:09:49,910
need it context lets us jump through the
component tree and use data at any level

482
00:09:49,910 --> 00:09:49,920
component tree and use data at any level
 

483
00:09:49,920 --> 00:09:52,710
component tree and use data at any level
without making props to use context you

484
00:09:52,710 --> 00:09:52,720
without making props to use context you
 

485
00:09:52,720 --> 00:09:55,030
without making props to use context you
first create context in a parent

486
00:09:55,030 --> 00:09:55,040
first create context in a parent
 

487
00:09:55,040 --> 00:09:57,110
first create context in a parent
component then wrap your parent

488
00:09:57,110 --> 00:09:57,120
component then wrap your parent
 

489
00:09:57,120 --> 00:09:59,550
component then wrap your parent
component in a special context component

490
00:09:59,550 --> 00:09:59,560
component in a special context component
 

491
00:09:59,560 --> 00:10:02,350
component in a special context component
called a context provider put the data

492
00:10:02,350 --> 00:10:02,360
called a context provider put the data
 

493
00:10:02,360 --> 00:10:05,150
called a context provider put the data
you want to pass down on the provider

494
00:10:05,150 --> 00:10:05,160
you want to pass down on the provider
 

495
00:10:05,160 --> 00:10:07,389
you want to pass down on the provider
and finally access that data in any

496
00:10:07,389 --> 00:10:07,399
and finally access that data in any
 

497
00:10:07,399 --> 00:10:10,190
and finally access that data in any
child component with the used context

498
00:10:10,190 --> 00:10:10,200
child component with the used context
 

499
00:10:10,200 --> 00:10:12,990
child component with the used context
hook portals on the other hand are kind

500
00:10:12,990 --> 00:10:13,000
hook portals on the other hand are kind
 

501
00:10:13,000 --> 00:10:15,710
hook portals on the other hand are kind
of like context but for components

502
00:10:15,710 --> 00:10:15,720
of like context but for components
 

503
00:10:15,720 --> 00:10:17,670
of like context but for components
portals let you move react components

504
00:10:17,670 --> 00:10:17,680
portals let you move react components
 

505
00:10:17,680 --> 00:10:20,990
portals let you move react components
into any HTML element you select portals

506
00:10:20,990 --> 00:10:21,000
into any HTML element you select portals
 

507
00:10:21,000 --> 00:10:22,590
into any HTML element you select portals
are great for components that can't be

508
00:10:22,590 --> 00:10:22,600
are great for components that can't be
 

509
00:10:22,600 --> 00:10:24,230
are great for components that can't be
displayed properly because of their

510
00:10:24,230 --> 00:10:24,240
displayed properly because of their
 

511
00:10:24,240 --> 00:10:26,630
displayed properly because of their
parents component styles for example for

512
00:10:26,630 --> 00:10:26,640
parents component styles for example for
 

513
00:10:26,640 --> 00:10:29,389
parents component styles for example for
displaying modals drop-down menus and

514
00:10:29,389 --> 00:10:29,399
displaying modals drop-down menus and
 

515
00:10:29,399 --> 00:10:32,430
displaying modals drop-down menus and
tool tips to create a portal just use

516
00:10:32,430 --> 00:10:32,440
tool tips to create a portal just use
 

517
00:10:32,440 --> 00:10:34,790
tool tips to create a portal just use
the create portal function pass your

518
00:10:34,790 --> 00:10:34,800
the create portal function pass your
 

519
00:10:34,800 --> 00:10:37,470
the create portal function pass your
component to it and choose the HTML

520
00:10:37,470 --> 00:10:37,480
component to it and choose the HTML
 

521
00:10:37,480 --> 00:10:39,030
component to it and choose the HTML
element where you'd like your react

522
00:10:39,030 --> 00:10:39,040
element where you'd like your react
 

523
00:10:39,040 --> 00:10:41,910
element where you'd like your react
component to appear suspense is a

524
00:10:41,910 --> 00:10:41,920
component to appear suspense is a
 

525
00:10:41,920 --> 00:10:43,550
component to appear suspense is a
special component that helps you handle

526
00:10:43,550 --> 00:10:43,560
special component that helps you handle
 

527
00:10:43,560 --> 00:10:46,829
special component that helps you handle
loading a component or its data suspense

528
00:10:46,829 --> 00:10:46,839
loading a component or its data suspense
 

529
00:10:46,839 --> 00:10:48,870
loading a component or its data suspense
is helpful for components that take some

530
00:10:48,870 --> 00:10:48,880
is helpful for components that take some
 

531
00:10:48,880 --> 00:10:51,509
is helpful for components that take some
time to fetch data it provides a better

532
00:10:51,509 --> 00:10:51,519
time to fetch data it provides a better
 

533
00:10:51,519 --> 00:10:53,710
time to fetch data it provides a better
user experience to show a fallback

534
00:10:53,710 --> 00:10:53,720
user experience to show a fallback
 

535
00:10:53,720 --> 00:10:55,910
user experience to show a fallback
component like a loading spinner until

536
00:10:55,910 --> 00:10:55,920
component like a loading spinner until
 

537
00:10:55,920 --> 00:10:58,550
component like a loading spinner until
the data is available instead of nothing

538
00:10:58,550 --> 00:10:58,560
the data is available instead of nothing
 

539
00:10:58,560 --> 00:11:00,710
the data is available instead of nothing
suspense is also useful if you're lazily

540
00:11:00,710 --> 00:11:00,720
suspense is also useful if you're lazily
 

541
00:11:00,720 --> 00:11:03,190
suspense is also useful if you're lazily
loading a component which lets us load a

542
00:11:03,190 --> 00:11:03,200
loading a component which lets us load a
 

543
00:11:03,200 --> 00:11:06,310
loading a component which lets us load a
component only when it's needed since

544
00:11:06,310 --> 00:11:06,320
component only when it's needed since
 

545
00:11:06,320 --> 00:11:08,629
component only when it's needed since
react apps are all JavaScript errors

546
00:11:08,629 --> 00:11:08,639
react apps are all JavaScript errors
 

547
00:11:08,639 --> 00:11:10,550
react apps are all JavaScript errors
that happen during rendering can totally

548
00:11:10,550 --> 00:11:10,560
that happen during rendering can totally
 

549
00:11:10,560 --> 00:11:12,750
that happen during rendering can totally
break your app airor boundaries are

550
00:11:12,750 --> 00:11:12,760
break your app airor boundaries are
 

551
00:11:12,760 --> 00:11:14,430
break your app airor boundaries are
components that let you catch app

552
00:11:14,430 --> 00:11:14,440
components that let you catch app
 

553
00:11:14,440 --> 00:11:16,269
components that let you catch app
breaking errors and show a fallback

554
00:11:16,269 --> 00:11:16,279
breaking errors and show a fallback
 

555
00:11:16,279 --> 00:11:18,269
breaking errors and show a fallback
component to tell the user about what

556
00:11:18,269 --> 00:11:18,279
component to tell the user about what
 

557
00:11:18,279 --> 00:11:21,150
component to tell the user about what
happened for example our app will crash

558
00:11:21,150 --> 00:11:21,160
happened for example our app will crash
 

559
00:11:21,160 --> 00:11:23,470
happened for example our app will crash
if we run this code because it throws an

560
00:11:23,470 --> 00:11:23,480
if we run this code because it throws an
 

561
00:11:23,480 --> 00:11:25,949
if we run this code because it throws an
error when there's no user to prevent

562
00:11:25,949 --> 00:11:25,959
error when there's no user to prevent
 

563
00:11:25,959 --> 00:11:28,190
error when there's no user to prevent
our app from crashing we'll first add an

564
00:11:28,190 --> 00:11:28,200
our app from crashing we'll first add an
 

565
00:11:28,200 --> 00:11:30,310
our app from crashing we'll first add an
error boundary to display a fallback

566
00:11:30,310 --> 00:11:30,320
error boundary to display a fallback
 

567
00:11:30,320 --> 00:11:32,430
error boundary to display a fallback
component with a more helpful error

568
00:11:32,430 --> 00:11:32,440
component with a more helpful error
 

569
00:11:32,440 --> 00:11:35,670
component with a more helpful error
message to be displayed to the user now

570
00:11:35,670 --> 00:11:35,680
message to be displayed to the user now
 

571
00:11:35,680 --> 00:11:37,670
message to be displayed to the user now
if you really want to dive deep into

572
00:11:37,670 --> 00:11:37,680
if you really want to dive deep into
 

573
00:11:37,680 --> 00:11:39,990
if you really want to dive deep into
react I've put together a complete boot

574
00:11:39,990 --> 00:11:40,000
react I've put together a complete boot
 

575
00:11:40,000 --> 00:11:41,949
react I've put together a complete boot
camp to help you master every one of

576
00:11:41,949 --> 00:11:41,959
camp to help you master every one of
 

577
00:11:41,959 --> 00:11:44,190
camp to help you master every one of
these Concepts from front to back you

578
00:11:44,190 --> 00:11:44,200
these Concepts from front to back you
 

579
00:11:44,200 --> 00:11:47,629
these Concepts from front to back you
can get started now at react boot camp.

580
00:11:47,629 --> 00:11:47,639
can get started now at react boot camp.
 

581
00:11:47,639 --> 00:11:49,430
can get started now at react boot camp.
I hope you learned a lot in this video

582
00:11:49,430 --> 00:11:49,440
I hope you learned a lot in this video
 

583
00:11:49,440 --> 00:11:54,240
I hope you learned a lot in this video
and I'll see you in the next one

